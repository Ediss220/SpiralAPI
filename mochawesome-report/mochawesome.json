{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-18T19:09:07.428Z",
    "end": "2023-08-18T19:09:11.208Z",
    "duration": 3780,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6ae6caac-279f-4b1e-a251-10b5e002159c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dbaee978-70a3-4a5a-b10d-6534a9ba8309",
          "title": "Spiral API Test",
          "fullFile": "C:\\Users\\eduar\\SpiralAPI\\SpiralAPI\\api-test\\delete-api-test.js",
          "file": "\\api-test\\delete-api-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete user",
              "fullTitle": "Spiral API Test delete user",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deletepostId = 4;\n    return axios.delete(`${BaseURL}/${deletepostId}`)\n  \n.then(res => {\n  expect(res.status).to.equal(200)\n     \n  });",
              "err": {},
              "uuid": "6d8e8544-bbd8-41bf-8c7c-7d00314e0d3b",
              "parentUUID": "dbaee978-70a3-4a5a-b10d-6534a9ba8309",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d8e8544-bbd8-41bf-8c7c-7d00314e0d3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 161,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "56408401-cce6-4228-8c39-a8b891a7c142",
          "title": "Spiral API Test",
          "fullFile": "C:\\Users\\eduar\\SpiralAPI\\SpiralAPI\\api-test\\get-api-test.js",
          "file": "\\api-test\\get-api-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "api-test",
              "fullTitle": "Spiral API Test api-test",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return axios.get(BaseURL)\n .then(res => {\n    expect(res.status).equals(200);\n    expect(res.data).to.be.an('array').that.is.not.empty\n    //console.log(res.data);\n   })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "d83e9014-58b9-4959-9445-31a27b43ad0d",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return a specific post by id",
              "fullTitle": "Spiral API Test return a specific post by id",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postId = 11;\nreturn axios.get(`${BaseURL}/${postId}`)\n.then(res => {\n  expect(res.status).to.equal(200)\n  expect(res.data.id).to.equal(postId);\n  \n })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "db01c34d-dae4-42a2-9b98-13b6aee95ba1",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return a specific user by title",
              "fullTitle": "Spiral API Test return a specific user by title",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const title = 'enim unde ratione doloribus quas enim ut sit sapiente';\nreturn axios.get(BaseURL)\n.then(res => {\n  expect(res.status).to.equal(200)\n  const user = res.data[73];\n  expect(user.title).to.equal(title);\n  //console.log(res.data[73]);\n })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "21537a2b-0743-4da6-9be1-e95716ed0b1a",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return comments for a specific post",
              "fullTitle": "Spiral API Test return comments for a specific post",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postId = 11;\nreturn axios.get(`${BaseURL}/${postId}/comments`)\n.then(res => {\n  expect(res.status).to.equal(200)\n  for (const comment of res.data) {\n    expect(comment.postId).to.equal(postId);\n  }\n  //console.log(res.data);\n })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "b00dacb3-7805-4a61-96bb-a108d72f3d8a",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return a 404 response for an invalid post id",
              "fullTitle": "Spiral API Test return a 404 response for an invalid post id",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPostId = 211;\ntry {\n  await axios.get(`${BaseURL}/${invalidPostId}`);\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n}",
              "err": {},
              "uuid": "7437667c-1907-4711-bce6-7b3ed447b5ba",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "leght-test",
              "fullTitle": "Spiral API Test leght-test",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return axios.get(BaseURL)\n.then(res => {\n    expect(res.status).equals(200);\n    expect(res.data).to.be.an('array').that.is.not.empty\n    expect(res.data.length).greaterThan(0)\n  })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "48eed963-d75d-419b-844d-4c2e84b588ad",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid endpoint",
              "fullTitle": "Spiral API Test invalid endpoint",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{\nawait axios.get(\"https://jsonplaceholder.typicode.com/postsed\");\n  } catch (error) {\nexpect(error.response.status).to.equal(404);\n  }",
              "err": {},
              "uuid": "f24584a6-23e8-4b72-9c28-420100d53f92",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "response time test",
              "fullTitle": "Spiral API Test response time test",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst startTimestamp = new Date().getTime();\nconst res = await axios.get(BaseURL);\nconst endTimestamp = new Date().getTime();\nconst resTime = endTimestamp - startTimestamp;\nconst acceptableMaxResponseTime = 100;\nexpect(resTime).to.be.at.most(acceptableMaxResponseTime);",
              "err": {},
              "uuid": "3944f069-835b-4aa0-89c1-8b221cdac252",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle rate limiting",
              "fullTitle": "Spiral API Test should handle rate limiting",
              "timedOut": false,
              "duration": 3280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\ntry {\n  // Send a burst of requests in a loop to trigger rate limiting\n  for (let i = 0; i < 120; i++) {\n    await axios.get(BaseURL);\n  }\n} catch (error) {\n  expect(error.response.status).to.equal(429);\n  expect(error.response.data.message).to.include('Rate limit exceeded');\n}",
              "err": {},
              "uuid": "ad5944a0-0d2a-45ff-8e39-cf5d22bbafcc",
              "parentUUID": "56408401-cce6-4228-8c39-a8b891a7c142",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d83e9014-58b9-4959-9445-31a27b43ad0d",
            "db01c34d-dae4-42a2-9b98-13b6aee95ba1",
            "21537a2b-0743-4da6-9be1-e95716ed0b1a",
            "b00dacb3-7805-4a61-96bb-a108d72f3d8a",
            "7437667c-1907-4711-bce6-7b3ed447b5ba",
            "48eed963-d75d-419b-844d-4c2e84b588ad",
            "f24584a6-23e8-4b72-9c28-420100d53f92",
            "3944f069-835b-4aa0-89c1-8b221cdac252",
            "ad5944a0-0d2a-45ff-8e39-cf5d22bbafcc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3504,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7a800ad3-fdb9-4988-9d4e-2045d6401c1a",
          "title": "Spiral API Test",
          "fullFile": "C:\\Users\\eduar\\SpiralAPI\\SpiralAPI\\api-test\\post-api-test.js",
          "file": "\\api-test\\post-api-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a new user",
              "fullTitle": "Spiral API Test create a new user",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  userId: 101,\n  title: 'Add Test Title',\n  body: 'Test body'\n};\n return axios.post(BaseURL,newUser)\n  \n.then(res => {\n  expect(res.status).to.equal(201)\n  expect(res.data).to.deep.include(newUser);\n  \n })\n  .catch(error => {\n    console.error(error);\n  });",
              "err": {},
              "uuid": "d4c758c8-e005-4306-ad06-6a98093ecbb3",
              "parentUUID": "7a800ad3-fdb9-4988-9d4e-2045d6401c1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4c758c8-e005-4306-ad06-6a98093ecbb3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 56,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5c274c3f-254c-45be-a9fb-70f00feb416e",
          "title": "Spiral API Test",
          "fullFile": "C:\\Users\\eduar\\SpiralAPI\\SpiralAPI\\api-test\\put-api-test.js",
          "file": "\\api-test\\put-api-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "edit user",
              "fullTitle": "Spiral API Test edit user",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postId = 4;\nconst editUser = {\n  userId: 5,\n  id: postId,\n  title: 'Edit Test Title',\n  body: 'Edit Test body'\n};\n return axios.put(BaseURL,editUser)\n  \n.then(res => {\n  expect(res.status).to.equal(200)\n  expect(res.data).to.deep.include(editUser);\n  \n })\n  .catch(error => {\n    expect(error.response.status).to.equal(404);\n  });",
              "err": {},
              "uuid": "698d8cfe-d1ed-4945-be71-0a44604503b8",
              "parentUUID": "5c274c3f-254c-45be-a9fb-70f00feb416e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "698d8cfe-d1ed-4945-be71-0a44604503b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}